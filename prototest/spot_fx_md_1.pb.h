// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spot_fx_md_1.proto

#ifndef PROTOBUF_spot_5ffx_5fmd_5f1_2eproto__INCLUDED
#define PROTOBUF_spot_5ffx_5fmd_5f1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace capitalk {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
void protobuf_AssignDesc_spot_5ffx_5fmd_5f1_2eproto();
void protobuf_ShutdownFile_spot_5ffx_5fmd_5f1_2eproto();

class spot_fx_md_1;

enum side_t {
  BUY = 0,
  SELL = 1
};
bool side_t_IsValid(int value);
const side_t side_t_MIN = BUY;
const side_t side_t_MAX = SELL;
const int side_t_ARRAYSIZE = side_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* side_t_descriptor();
inline const ::std::string& side_t_Name(side_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    side_t_descriptor(), value);
}
inline bool side_t_Parse(
    const ::std::string& name, side_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<side_t>(
    side_t_descriptor(), name, value);
}
enum quote_t {
  INDICATIVE = 0,
  TRADEABLE = 1
};
bool quote_t_IsValid(int value);
const quote_t quote_t_MIN = INDICATIVE;
const quote_t quote_t_MAX = TRADEABLE;
const int quote_t_ARRAYSIZE = quote_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* quote_t_descriptor();
inline const ::std::string& quote_t_Name(quote_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    quote_t_descriptor(), value);
}
inline bool quote_t_Parse(
    const ::std::string& name, quote_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<quote_t>(
    quote_t_descriptor(), name, value);
}
// ===================================================================

class spot_fx_md_1 : public ::google::protobuf::Message {
 public:
  spot_fx_md_1();
  virtual ~spot_fx_md_1();
  
  spot_fx_md_1(const spot_fx_md_1& from);
  
  inline spot_fx_md_1& operator=(const spot_fx_md_1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const spot_fx_md_1& default_instance();
  
  void Swap(spot_fx_md_1* other);
  
  // implements Message ----------------------------------------------
  
  spot_fx_md_1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const spot_fx_md_1& from);
  void MergeFrom(const spot_fx_md_1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required .capitalk.side_t side = 3;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 3;
  inline capitalk::side_t side() const;
  inline void set_side(capitalk::side_t value);
  
  // required double size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline double size() const;
  inline void set_size(double value);
  
  // required double price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline double price() const;
  inline void set_price(double value);
  
  // required double venue = 6;
  inline bool has_venue() const;
  inline void clear_venue();
  static const int kVenueFieldNumber = 6;
  inline double venue() const;
  inline void set_venue(double value);
  
  // optional .capitalk.quote_t quote_type = 7 [default = INDICATIVE];
  inline bool has_quote_type() const;
  inline void clear_quote_type();
  static const int kQuoteTypeFieldNumber = 7;
  inline capitalk::quote_t quote_type() const;
  inline void set_quote_type(capitalk::quote_t value);
  
  // @@protoc_insertion_point(class_scope:capitalk.spot_fx_md_1)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_venue();
  inline void clear_has_venue();
  inline void set_has_quote_type();
  inline void clear_has_quote_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  int side_;
  double size_;
  double price_;
  double venue_;
  int quote_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5f1_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5f1_2eproto();
  
  void InitAsDefaultInstance();
  static spot_fx_md_1* default_instance_;
};
// ===================================================================


// ===================================================================

// spot_fx_md_1

// required string name = 1;
inline bool spot_fx_md_1::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void spot_fx_md_1::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void spot_fx_md_1::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void spot_fx_md_1::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& spot_fx_md_1::name() const {
  return *name_;
}
inline void spot_fx_md_1::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void spot_fx_md_1::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void spot_fx_md_1::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* spot_fx_md_1::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* spot_fx_md_1::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 id = 2;
inline bool spot_fx_md_1::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void spot_fx_md_1::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void spot_fx_md_1::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void spot_fx_md_1::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 spot_fx_md_1::id() const {
  return id_;
}
inline void spot_fx_md_1::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .capitalk.side_t side = 3;
inline bool spot_fx_md_1::has_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void spot_fx_md_1::set_has_side() {
  _has_bits_[0] |= 0x00000004u;
}
inline void spot_fx_md_1::clear_has_side() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void spot_fx_md_1::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline capitalk::side_t spot_fx_md_1::side() const {
  return static_cast< capitalk::side_t >(side_);
}
inline void spot_fx_md_1::set_side(capitalk::side_t value) {
  GOOGLE_DCHECK(capitalk::side_t_IsValid(value));
  set_has_side();
  side_ = value;
}

// required double size = 4;
inline bool spot_fx_md_1::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void spot_fx_md_1::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void spot_fx_md_1::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void spot_fx_md_1::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline double spot_fx_md_1::size() const {
  return size_;
}
inline void spot_fx_md_1::set_size(double value) {
  set_has_size();
  size_ = value;
}

// required double price = 5;
inline bool spot_fx_md_1::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void spot_fx_md_1::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void spot_fx_md_1::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void spot_fx_md_1::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double spot_fx_md_1::price() const {
  return price_;
}
inline void spot_fx_md_1::set_price(double value) {
  set_has_price();
  price_ = value;
}

// required double venue = 6;
inline bool spot_fx_md_1::has_venue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void spot_fx_md_1::set_has_venue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void spot_fx_md_1::clear_has_venue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void spot_fx_md_1::clear_venue() {
  venue_ = 0;
  clear_has_venue();
}
inline double spot_fx_md_1::venue() const {
  return venue_;
}
inline void spot_fx_md_1::set_venue(double value) {
  set_has_venue();
  venue_ = value;
}

// optional .capitalk.quote_t quote_type = 7 [default = INDICATIVE];
inline bool spot_fx_md_1::has_quote_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void spot_fx_md_1::set_has_quote_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void spot_fx_md_1::clear_has_quote_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void spot_fx_md_1::clear_quote_type() {
  quote_type_ = 0;
  clear_has_quote_type();
}
inline capitalk::quote_t spot_fx_md_1::quote_type() const {
  return static_cast< capitalk::quote_t >(quote_type_);
}
inline void spot_fx_md_1::set_quote_type(capitalk::quote_t value) {
  GOOGLE_DCHECK(capitalk::quote_t_IsValid(value));
  set_has_quote_type();
  quote_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capitalk

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< capitalk::side_t>() {
  return capitalk::side_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< capitalk::quote_t>() {
  return capitalk::quote_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spot_5ffx_5fmd_5f1_2eproto__INCLUDED
