// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spot_fx_md_1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capitalk {

namespace {

const ::google::protobuf::Descriptor* spot_fx_md_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  spot_fx_md_1_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* side_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* quote_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_spot_5ffx_5fmd_5f1_2eproto() {
  protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spot_fx_md_1.proto");
  GOOGLE_CHECK(file != NULL);
  spot_fx_md_1_descriptor_ = file->message_type(0);
  static const int spot_fx_md_1_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, venue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, quote_type_),
  };
  spot_fx_md_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      spot_fx_md_1_descriptor_,
      spot_fx_md_1::default_instance_,
      spot_fx_md_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spot_fx_md_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(spot_fx_md_1));
  side_t_descriptor_ = file->enum_type(0);
  quote_t_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spot_5ffx_5fmd_5f1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    spot_fx_md_1_descriptor_, &spot_fx_md_1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spot_5ffx_5fmd_5f1_2eproto() {
  delete spot_fx_md_1::default_instance_;
  delete spot_fx_md_1_reflection_;
}

void protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022spot_fx_md_1.proto\022\010capitalk\"\247\001\n\014spot_"
    "fx_md_1\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\036\n\004sid"
    "e\030\003 \002(\0162\020.capitalk.side_t\022\014\n\004size\030\004 \002(\001\022"
    "\r\n\005price\030\005 \002(\001\022\r\n\005venue\030\006 \002(\001\0221\n\nquote_t"
    "ype\030\007 \001(\0162\021.capitalk.quote_t:\nINDICATIVE"
    "*\033\n\006side_t\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001*(\n\007quote_t"
    "\022\016\n\nINDICATIVE\020\000\022\r\n\tTRADEABLE\020\001", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spot_fx_md_1.proto", &protobuf_RegisterTypes);
  spot_fx_md_1::default_instance_ = new spot_fx_md_1();
  spot_fx_md_1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spot_5ffx_5fmd_5f1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spot_5ffx_5fmd_5f1_2eproto {
  StaticDescriptorInitializer_spot_5ffx_5fmd_5f1_2eproto() {
    protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  }
} static_descriptor_initializer_spot_5ffx_5fmd_5f1_2eproto_;

const ::google::protobuf::EnumDescriptor* side_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return side_t_descriptor_;
}
bool side_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* quote_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quote_t_descriptor_;
}
bool quote_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int spot_fx_md_1::kNameFieldNumber;
const int spot_fx_md_1::kIdFieldNumber;
const int spot_fx_md_1::kSideFieldNumber;
const int spot_fx_md_1::kSizeFieldNumber;
const int spot_fx_md_1::kPriceFieldNumber;
const int spot_fx_md_1::kVenueFieldNumber;
const int spot_fx_md_1::kQuoteTypeFieldNumber;
#endif  // !_MSC_VER

spot_fx_md_1::spot_fx_md_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void spot_fx_md_1::InitAsDefaultInstance() {
}

spot_fx_md_1::spot_fx_md_1(const spot_fx_md_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void spot_fx_md_1::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  side_ = 0;
  size_ = 0;
  price_ = 0;
  venue_ = 0;
  quote_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

spot_fx_md_1::~spot_fx_md_1() {
  SharedDtor();
}

void spot_fx_md_1::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void spot_fx_md_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* spot_fx_md_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return spot_fx_md_1_descriptor_;
}

const spot_fx_md_1& spot_fx_md_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();  return *default_instance_;
}

spot_fx_md_1* spot_fx_md_1::default_instance_ = NULL;

spot_fx_md_1* spot_fx_md_1::New() const {
  return new spot_fx_md_1;
}

void spot_fx_md_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    side_ = 0;
    size_ = 0;
    price_ = 0;
    venue_ = 0;
    quote_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool spot_fx_md_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_side;
        break;
      }
      
      // required .capitalk.side_t side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (capitalk::side_t_IsValid(value)) {
            set_side(static_cast< capitalk::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_size;
        break;
      }
      
      // required double size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_price;
        break;
      }
      
      // required double price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_venue;
        break;
      }
      
      // required double venue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_venue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &venue_)));
          set_has_venue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quote_type;
        break;
      }
      
      // optional .capitalk.quote_t quote_type = 7 [default = INDICATIVE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quote_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (capitalk::quote_t_IsValid(value)) {
            set_quote_type(static_cast< capitalk::quote_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void spot_fx_md_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required .capitalk.side_t side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->side(), output);
  }
  
  // required double size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->size(), output);
  }
  
  // required double price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }
  
  // required double venue = 6;
  if (has_venue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->venue(), output);
  }
  
  // optional .capitalk.quote_t quote_type = 7 [default = INDICATIVE];
  if (has_quote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->quote_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* spot_fx_md_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required .capitalk.side_t side = 3;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->side(), target);
  }
  
  // required double size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->size(), target);
  }
  
  // required double price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }
  
  // required double venue = 6;
  if (has_venue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->venue(), target);
  }
  
  // optional .capitalk.quote_t quote_type = 7 [default = INDICATIVE];
  if (has_quote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->quote_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int spot_fx_md_1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required .capitalk.side_t side = 3;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
    // required double size = 4;
    if (has_size()) {
      total_size += 1 + 8;
    }
    
    // required double price = 5;
    if (has_price()) {
      total_size += 1 + 8;
    }
    
    // required double venue = 6;
    if (has_venue()) {
      total_size += 1 + 8;
    }
    
    // optional .capitalk.quote_t quote_type = 7 [default = INDICATIVE];
    if (has_quote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quote_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void spot_fx_md_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const spot_fx_md_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const spot_fx_md_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void spot_fx_md_1::MergeFrom(const spot_fx_md_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_venue()) {
      set_venue(from.venue());
    }
    if (from.has_quote_type()) {
      set_quote_type(from.quote_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void spot_fx_md_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void spot_fx_md_1::CopyFrom(const spot_fx_md_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool spot_fx_md_1::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void spot_fx_md_1::Swap(spot_fx_md_1* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(side_, other->side_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(venue_, other->venue_);
    std::swap(quote_type_, other->quote_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata spot_fx_md_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = spot_fx_md_1_descriptor_;
  metadata.reflection = spot_fx_md_1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capitalk

// @@protoc_insertion_point(global_scope)
